/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.19.0 (NJsonSchema v9.10.58.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IServiceProxy {
    /**
     * 获取资源类型列表
     * @return Success
     */
    apiAdvertisingTypeGet(): Observable<GetADTypeListDto[]>;
    /**
     * 获取资源列表
     * @keyWord (optional) 关键字
     * @aDTypeId (optional) 资源类别Id
     * @referralId (optional) 推广项目Id
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiAdvertisingGet(keyWord: string | null | undefined, aDTypeId: number | null | undefined, referralId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetADListDto>;
    /**
     * 获取资源详情
     * @id 资源Id
     * @return Success
     */
    apiAdvertisingByIdGet(id: number): Observable<GetADDetailOutput>;
    /**
     * 登陆
     * @input (optional) 
     * @return Success
     */
    apiAgentLoginPost(input: AppLoginInput | null | undefined): Observable<AppLoginOutput>;
    /**
     * 编辑
     * @input (optional) 
     * @return Success
     */
    apiAgentPut(input: EditAgentInput | null | undefined): Observable<EditAgentOutput>;
    /**
     * 个人中心
     * @return Success
     */
    apiAgentMeGet(): Observable<GetAgentInfoOutput>;
    /**
     * 获取轮询图
     * @carouselPictures (optional) 轮询图类型
     * @return Success
     */
    apiContentsCarouselPicturesGet(carouselPictures: CarouselPictures | null | undefined): Observable<GetCarouselPictureListDto[]>;
    /**
     * 获取资讯/公告列表
     * @keyWord (optional) 关键字
     * @newsType (optional) 资讯类型
     * @newsColumnId (optional) 新闻栏目Id
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiContentsNewsGet(keyWord: string | null | undefined, newsType: NewsType | null | undefined, newsColumnId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetNewsListDto>;
    /**
     * 获取资讯/公告详情
     * @id 资讯Id
     * @return Success
     */
    apiContentsNewsByIdGet(id: number): Observable<GetNewsDetailInfoOutput>;
    /**
     * 获取用户协议
     * @return Success
     */
    apiContentsUserAgreementGet(): Observable<GetUserAgreementInfoOutput>;
    /**
     * 获取资讯栏目
     * @return Success
     */
    apiContentsNewsColumnGet(): Observable<GetNewsColumnListDto[]>;
    /**
     * 获取我的客户列表
     * @agentInfoId (optional) 代理Id  可以不传
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiCustomerMeGet(agentInfoId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetMyCustomerListDto>;
    /**
     * 新增客户
     * @input (optional) 
     * @return Success
     */
    apiCustomerPost(input: AddCustomerListInput | null | undefined): Observable<AddCustomerListDto[]>;
    /**
     * 获取省级行政区
     * @return Success
     */
    apiDistrictsGet(): Observable<GetProvinceListDto[]>;
    /**
     * 根据父级Id获取区域信息
     * @parentId 父级区域Id
     * @return Success
     */
    apiDistrictsByParentIdGet(parentId: number): Observable<GetDistrictsListByParentIdDto[]>;
    /**
     * 支付 完成之后
     * @input (optional) 
     * @return Success
     */
    apiOrderPut(input: PayMyOrderInput | null | undefined): Observable<PayMyOrderOutput>;
    /**
     * 开单
     * @input (optional) 
     * @return Success
     */
    apiOrderPost(input: AddMyOrderInput | null | undefined): Observable<AddMyOrderOutput>;
    /**
     * 获取我的开单记录
     * @phone (optional) 手机号码
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiOrderMeGet(phone: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetMyOrderListDto>;
    /**
     * 获取支付宝配置参数
     * @orderId (optional) 订单Id
     * @amount (optional) 支付金额
     * @return Success
     */
    apiPayAliPayGet(orderId: number | null | undefined, amount: number | null | undefined): Observable<string>;
    /**
     * 获取微信配置参数
     * @orderId (optional) 订单Id
     * @amount (optional) 支付金额
     * @return Success
     */
    apiPayWeChatGet(orderId: number | null | undefined, amount: number | null | undefined): Observable<AppPayOutput>;
    /**
     * @tenantId (optional) 
     * @return Success
     */
    payNotifyByTenantIdByProviderPost(tenantId: number | null | undefined, provider: string): Observable<void>;
    /**
     * 获取推广项目个人收入排行榜
     * @referralId (optional) 推广项目Id （查询总榜 传入0）
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiReferralReferralRankingGet(referralId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetReferralRankingListDto>;
    /**
     * 获取所有推广项目列表
     * @return Success
     */
    apiReferralAllReferralProjectAllGet(): Observable<GetAllReferralProjectListDto[]>;
    /**
     * 获取我的推广项目列表
     * @return Success
     */
    apiReferralReferralProjectMeGet(): Observable<GetReferralProjectListDto[]>;
    /**
     * 获取我的上级推荐人列表
     * @agentId (optional) 推广代理人AgentId
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiReferralSuperiorMeGet(agentId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetMySuperiorListDto>;
    /**
     * 获取我的团队列表
     * @agentId (optional) 推广代理人AgentId
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiReferralSubordinateMeGet(agentId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetMySubordinateListDto>;
    /**
     * 获取我的推广明细
     * @referralId (optional) 推广项目Id 为Null时查询登录用户所有推广项目
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiReferralReferralDetailMeGet(referralId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetReferralDetailListDto>;
    /**
     * 请求发送短信验证码
     * @input (optional) 
     * @return Success
     */
    apiSmsCodePost(input: CreateSmsCodeInput | null | undefined): Observable<void>;
    /**
     * 添加银行卡
     * @input (optional) 
     * @return Success
     */
    apiWithdrawBankCardPost(input: AddBankCardInput | null | undefined): Observable<AddBankCardOutput>;
    /**
     * 获取系统支持的所有银行
     * @return Success
     */
    apiWithdrawBankInfoGet(): Observable<GetBankInfoListDto[]>;
    /**
     * 获取提现银行
     * @return Success
     */
    apiWithdrawBankCardMeGet(): Observable<GetBankCardOutput>;
    /**
     * 申请提现
     * @input (optional) 
     * @return Success
     */
    apiWithdrawPost(input: WithdrawDepositInput | null | undefined): Observable<WithdrawDepositOutput>;
    /**
     * 获取提现记录列表
     * @agentInfoId (optional) 代理Id 可以不传
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiWithdrawMeGet(agentInfoId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetWithdrawDepositListDto>;
}

@Injectable()
export class ServiceProxy implements IServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取资源类型列表
     * @return Success
     */
    apiAdvertisingTypeGet(): Observable<GetADTypeListDto[]> {
        let url_ = this.baseUrl + "/api/Advertising/Type";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiAdvertisingTypeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAdvertisingTypeGet(<any>response_);
                } catch (e) {
                    return <Observable<GetADTypeListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetADTypeListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processApiAdvertisingTypeGet(response: HttpResponseBase): Observable<GetADTypeListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetADTypeListDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetADTypeListDto[]>(<any>null);
    }

    /**
     * 获取资源列表
     * @keyWord (optional) 关键字
     * @aDTypeId (optional) 资源类别Id
     * @referralId (optional) 推广项目Id
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiAdvertisingGet(keyWord: string | null | undefined, aDTypeId: number | null | undefined, referralId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetADListDto> {
        let url_ = this.baseUrl + "/api/Advertising?";
        if (keyWord !== undefined)
            url_ += "KeyWord=" + encodeURIComponent("" + keyWord) + "&"; 
        if (aDTypeId !== undefined)
            url_ += "ADTypeId=" + encodeURIComponent("" + aDTypeId) + "&"; 
        if (referralId !== undefined)
            url_ += "ReferralId=" + encodeURIComponent("" + referralId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiAdvertisingGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAdvertisingGet(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetADListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetADListDto>><any>Observable.throw(response_);
        });
    }

    protected processApiAdvertisingGet(response: HttpResponseBase): Observable<PagedResultDtoOfGetADListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetADListDto.fromJS(resultData200) : new PagedResultDtoOfGetADListDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PagedResultDtoOfGetADListDto>(<any>null);
    }

    /**
     * 获取资源详情
     * @id 资源Id
     * @return Success
     */
    apiAdvertisingByIdGet(id: number): Observable<GetADDetailOutput> {
        let url_ = this.baseUrl + "/api/Advertising/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiAdvertisingByIdGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAdvertisingByIdGet(<any>response_);
                } catch (e) {
                    return <Observable<GetADDetailOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetADDetailOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiAdvertisingByIdGet(response: HttpResponseBase): Observable<GetADDetailOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetADDetailOutput.fromJS(resultData200) : new GetADDetailOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetADDetailOutput>(<any>null);
    }

    /**
     * 登陆
     * @input (optional) 
     * @return Success
     */
    apiAgentLoginPost(input: AppLoginInput | null | undefined): Observable<AppLoginOutput> {
        let url_ = this.baseUrl + "/api/Agent/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processApiAgentLoginPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAgentLoginPost(<any>response_);
                } catch (e) {
                    return <Observable<AppLoginOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<AppLoginOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiAgentLoginPost(response: HttpResponseBase): Observable<AppLoginOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppLoginOutput.fromJS(resultData200) : new AppLoginOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AppLoginOutput>(<any>null);
    }

    /**
     * 编辑
     * @input (optional) 
     * @return Success
     */
    apiAgentPut(input: EditAgentInput | null | undefined): Observable<EditAgentOutput> {
        let url_ = this.baseUrl + "/api/Agent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processApiAgentPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAgentPut(<any>response_);
                } catch (e) {
                    return <Observable<EditAgentOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<EditAgentOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiAgentPut(response: HttpResponseBase): Observable<EditAgentOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? EditAgentOutput.fromJS(resultData200) : new EditAgentOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<EditAgentOutput>(<any>null);
    }

    /**
     * 个人中心
     * @return Success
     */
    apiAgentMeGet(): Observable<GetAgentInfoOutput> {
        let url_ = this.baseUrl + "/api/Agent/Me";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiAgentMeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiAgentMeGet(<any>response_);
                } catch (e) {
                    return <Observable<GetAgentInfoOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetAgentInfoOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiAgentMeGet(response: HttpResponseBase): Observable<GetAgentInfoOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetAgentInfoOutput.fromJS(resultData200) : new GetAgentInfoOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetAgentInfoOutput>(<any>null);
    }

    /**
     * 获取轮询图
     * @carouselPictures (optional) 轮询图类型
     * @return Success
     */
    apiContentsCarouselPicturesGet(carouselPictures: CarouselPictures | null | undefined): Observable<GetCarouselPictureListDto[]> {
        let url_ = this.baseUrl + "/api/Contents/CarouselPictures?";
        if (carouselPictures !== undefined)
            url_ += "CarouselPictures=" + encodeURIComponent("" + carouselPictures) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiContentsCarouselPicturesGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiContentsCarouselPicturesGet(<any>response_);
                } catch (e) {
                    return <Observable<GetCarouselPictureListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetCarouselPictureListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processApiContentsCarouselPicturesGet(response: HttpResponseBase): Observable<GetCarouselPictureListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetCarouselPictureListDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetCarouselPictureListDto[]>(<any>null);
    }

    /**
     * 获取资讯/公告列表
     * @keyWord (optional) 关键字
     * @newsType (optional) 资讯类型
     * @newsColumnId (optional) 新闻栏目Id
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiContentsNewsGet(keyWord: string | null | undefined, newsType: NewsType | null | undefined, newsColumnId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetNewsListDto> {
        let url_ = this.baseUrl + "/api/Contents/News?";
        if (keyWord !== undefined)
            url_ += "KeyWord=" + encodeURIComponent("" + keyWord) + "&"; 
        if (newsType !== undefined)
            url_ += "NewsType=" + encodeURIComponent("" + newsType) + "&"; 
        if (newsColumnId !== undefined)
            url_ += "NewsColumnId=" + encodeURIComponent("" + newsColumnId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiContentsNewsGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiContentsNewsGet(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetNewsListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetNewsListDto>><any>Observable.throw(response_);
        });
    }

    protected processApiContentsNewsGet(response: HttpResponseBase): Observable<PagedResultDtoOfGetNewsListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetNewsListDto.fromJS(resultData200) : new PagedResultDtoOfGetNewsListDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PagedResultDtoOfGetNewsListDto>(<any>null);
    }

    /**
     * 获取资讯/公告详情
     * @id 资讯Id
     * @return Success
     */
    apiContentsNewsByIdGet(id: number): Observable<GetNewsDetailInfoOutput> {
        let url_ = this.baseUrl + "/api/Contents/News/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiContentsNewsByIdGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiContentsNewsByIdGet(<any>response_);
                } catch (e) {
                    return <Observable<GetNewsDetailInfoOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewsDetailInfoOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiContentsNewsByIdGet(response: HttpResponseBase): Observable<GetNewsDetailInfoOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetNewsDetailInfoOutput.fromJS(resultData200) : new GetNewsDetailInfoOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetNewsDetailInfoOutput>(<any>null);
    }

    /**
     * 获取用户协议
     * @return Success
     */
    apiContentsUserAgreementGet(): Observable<GetUserAgreementInfoOutput> {
        let url_ = this.baseUrl + "/api/Contents/UserAgreement";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiContentsUserAgreementGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiContentsUserAgreementGet(<any>response_);
                } catch (e) {
                    return <Observable<GetUserAgreementInfoOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetUserAgreementInfoOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiContentsUserAgreementGet(response: HttpResponseBase): Observable<GetUserAgreementInfoOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetUserAgreementInfoOutput.fromJS(resultData200) : new GetUserAgreementInfoOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetUserAgreementInfoOutput>(<any>null);
    }

    /**
     * 获取资讯栏目
     * @return Success
     */
    apiContentsNewsColumnGet(): Observable<GetNewsColumnListDto[]> {
        let url_ = this.baseUrl + "/api/Contents/NewsColumn";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiContentsNewsColumnGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiContentsNewsColumnGet(<any>response_);
                } catch (e) {
                    return <Observable<GetNewsColumnListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetNewsColumnListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processApiContentsNewsColumnGet(response: HttpResponseBase): Observable<GetNewsColumnListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetNewsColumnListDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetNewsColumnListDto[]>(<any>null);
    }

    /**
     * 获取我的客户列表
     * @agentInfoId (optional) 代理Id  可以不传
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiCustomerMeGet(agentInfoId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetMyCustomerListDto> {
        let url_ = this.baseUrl + "/api/Customer/Me?";
        if (agentInfoId !== undefined)
            url_ += "AgentInfoId=" + encodeURIComponent("" + agentInfoId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiCustomerMeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiCustomerMeGet(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetMyCustomerListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetMyCustomerListDto>><any>Observable.throw(response_);
        });
    }

    protected processApiCustomerMeGet(response: HttpResponseBase): Observable<PagedResultDtoOfGetMyCustomerListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetMyCustomerListDto.fromJS(resultData200) : new PagedResultDtoOfGetMyCustomerListDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PagedResultDtoOfGetMyCustomerListDto>(<any>null);
    }

    /**
     * 新增客户
     * @input (optional) 
     * @return Success
     */
    apiCustomerPost(input: AddCustomerListInput | null | undefined): Observable<AddCustomerListDto[]> {
        let url_ = this.baseUrl + "/api/Customer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processApiCustomerPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiCustomerPost(<any>response_);
                } catch (e) {
                    return <Observable<AddCustomerListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<AddCustomerListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processApiCustomerPost(response: HttpResponseBase): Observable<AddCustomerListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AddCustomerListDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AddCustomerListDto[]>(<any>null);
    }

    /**
     * 获取省级行政区
     * @return Success
     */
    apiDistrictsGet(): Observable<GetProvinceListDto[]> {
        let url_ = this.baseUrl + "/api/Districts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiDistrictsGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiDistrictsGet(<any>response_);
                } catch (e) {
                    return <Observable<GetProvinceListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetProvinceListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processApiDistrictsGet(response: HttpResponseBase): Observable<GetProvinceListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetProvinceListDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetProvinceListDto[]>(<any>null);
    }

    /**
     * 根据父级Id获取区域信息
     * @parentId 父级区域Id
     * @return Success
     */
    apiDistrictsByParentIdGet(parentId: number): Observable<GetDistrictsListByParentIdDto[]> {
        let url_ = this.baseUrl + "/api/Districts/{ParentId}";
        if (parentId === undefined || parentId === null)
            throw new Error("The parameter 'parentId' must be defined.");
        url_ = url_.replace("{ParentId}", encodeURIComponent("" + parentId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiDistrictsByParentIdGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiDistrictsByParentIdGet(<any>response_);
                } catch (e) {
                    return <Observable<GetDistrictsListByParentIdDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetDistrictsListByParentIdDto[]>><any>Observable.throw(response_);
        });
    }

    protected processApiDistrictsByParentIdGet(response: HttpResponseBase): Observable<GetDistrictsListByParentIdDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetDistrictsListByParentIdDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetDistrictsListByParentIdDto[]>(<any>null);
    }

    /**
     * 支付 完成之后
     * @input (optional) 
     * @return Success
     */
    apiOrderPut(input: PayMyOrderInput | null | undefined): Observable<PayMyOrderOutput> {
        let url_ = this.baseUrl + "/api/Order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processApiOrderPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiOrderPut(<any>response_);
                } catch (e) {
                    return <Observable<PayMyOrderOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<PayMyOrderOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiOrderPut(response: HttpResponseBase): Observable<PayMyOrderOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PayMyOrderOutput.fromJS(resultData200) : new PayMyOrderOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PayMyOrderOutput>(<any>null);
    }

    /**
     * 开单
     * @input (optional) 
     * @return Success
     */
    apiOrderPost(input: AddMyOrderInput | null | undefined): Observable<AddMyOrderOutput> {
        let url_ = this.baseUrl + "/api/Order";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processApiOrderPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiOrderPost(<any>response_);
                } catch (e) {
                    return <Observable<AddMyOrderOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<AddMyOrderOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiOrderPost(response: HttpResponseBase): Observable<AddMyOrderOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AddMyOrderOutput.fromJS(resultData200) : new AddMyOrderOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AddMyOrderOutput>(<any>null);
    }

    /**
     * 获取我的开单记录
     * @phone (optional) 手机号码
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiOrderMeGet(phone: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetMyOrderListDto> {
        let url_ = this.baseUrl + "/api/Order/Me?";
        if (phone !== undefined)
            url_ += "Phone=" + encodeURIComponent("" + phone) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiOrderMeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiOrderMeGet(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetMyOrderListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetMyOrderListDto>><any>Observable.throw(response_);
        });
    }

    protected processApiOrderMeGet(response: HttpResponseBase): Observable<PagedResultDtoOfGetMyOrderListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetMyOrderListDto.fromJS(resultData200) : new PagedResultDtoOfGetMyOrderListDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PagedResultDtoOfGetMyOrderListDto>(<any>null);
    }

    /**
     * 获取支付宝配置参数
     * @orderId (optional) 订单Id
     * @amount (optional) 支付金额
     * @return Success
     */
    apiPayAliPayGet(orderId: number | null | undefined, amount: number | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Pay/AliPay?";
        if (orderId !== undefined)
            url_ += "OrderId=" + encodeURIComponent("" + orderId) + "&"; 
        if (amount !== undefined)
            url_ += "Amount=" + encodeURIComponent("" + amount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiPayAliPayGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPayAliPayGet(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>Observable.throw(e);
                }
            } else
                return <Observable<string>><any>Observable.throw(response_);
        });
    }

    protected processApiPayAliPayGet(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<string>(<any>null);
    }

    /**
     * 获取微信配置参数
     * @orderId (optional) 订单Id
     * @amount (optional) 支付金额
     * @return Success
     */
    apiPayWeChatGet(orderId: number | null | undefined, amount: number | null | undefined): Observable<AppPayOutput> {
        let url_ = this.baseUrl + "/api/Pay/WeChat?";
        if (orderId !== undefined)
            url_ += "OrderId=" + encodeURIComponent("" + orderId) + "&"; 
        if (amount !== undefined)
            url_ += "Amount=" + encodeURIComponent("" + amount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiPayWeChatGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPayWeChatGet(<any>response_);
                } catch (e) {
                    return <Observable<AppPayOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<AppPayOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiPayWeChatGet(response: HttpResponseBase): Observable<AppPayOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AppPayOutput.fromJS(resultData200) : new AppPayOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AppPayOutput>(<any>null);
    }

    /**
     * @tenantId (optional) 
     * @return Success
     */
    payNotifyByTenantIdByProviderPost(tenantId: number | null | undefined, provider: string): Observable<void> {
        let url_ = this.baseUrl + "/PayNotify/{tenantId}/{provider}?";
        if (provider === undefined || provider === null)
            throw new Error("The parameter 'provider' must be defined.");
        url_ = url_.replace("{provider}", encodeURIComponent("" + provider)); 
        if (tenantId !== undefined)
            url_ += "tenantId=" + encodeURIComponent("" + tenantId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processPayNotifyByTenantIdByProviderPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPayNotifyByTenantIdByProviderPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPayNotifyByTenantIdByProviderPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 获取推广项目个人收入排行榜
     * @referralId (optional) 推广项目Id （查询总榜 传入0）
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiReferralReferralRankingGet(referralId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetReferralRankingListDto> {
        let url_ = this.baseUrl + "/api/Referral/ReferralRanking?";
        if (referralId !== undefined)
            url_ += "ReferralId=" + encodeURIComponent("" + referralId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiReferralReferralRankingGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiReferralReferralRankingGet(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetReferralRankingListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetReferralRankingListDto>><any>Observable.throw(response_);
        });
    }

    protected processApiReferralReferralRankingGet(response: HttpResponseBase): Observable<PagedResultDtoOfGetReferralRankingListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetReferralRankingListDto.fromJS(resultData200) : new PagedResultDtoOfGetReferralRankingListDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PagedResultDtoOfGetReferralRankingListDto>(<any>null);
    }

    /**
     * 获取所有推广项目列表
     * @return Success
     */
    apiReferralAllReferralProjectAllGet(): Observable<GetAllReferralProjectListDto[]> {
        let url_ = this.baseUrl + "/api/Referral/AllReferralProject/All";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiReferralAllReferralProjectAllGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiReferralAllReferralProjectAllGet(<any>response_);
                } catch (e) {
                    return <Observable<GetAllReferralProjectListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetAllReferralProjectListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processApiReferralAllReferralProjectAllGet(response: HttpResponseBase): Observable<GetAllReferralProjectListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetAllReferralProjectListDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetAllReferralProjectListDto[]>(<any>null);
    }

    /**
     * 获取我的推广项目列表
     * @return Success
     */
    apiReferralReferralProjectMeGet(): Observable<GetReferralProjectListDto[]> {
        let url_ = this.baseUrl + "/api/Referral/ReferralProject/Me";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiReferralReferralProjectMeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiReferralReferralProjectMeGet(<any>response_);
                } catch (e) {
                    return <Observable<GetReferralProjectListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetReferralProjectListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processApiReferralReferralProjectMeGet(response: HttpResponseBase): Observable<GetReferralProjectListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetReferralProjectListDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetReferralProjectListDto[]>(<any>null);
    }

    /**
     * 获取我的上级推荐人列表
     * @agentId (optional) 推广代理人AgentId
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiReferralSuperiorMeGet(agentId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetMySuperiorListDto> {
        let url_ = this.baseUrl + "/api/Referral/Superior/Me?";
        if (agentId !== undefined)
            url_ += "AgentId=" + encodeURIComponent("" + agentId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiReferralSuperiorMeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiReferralSuperiorMeGet(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetMySuperiorListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetMySuperiorListDto>><any>Observable.throw(response_);
        });
    }

    protected processApiReferralSuperiorMeGet(response: HttpResponseBase): Observable<PagedResultDtoOfGetMySuperiorListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetMySuperiorListDto.fromJS(resultData200) : new PagedResultDtoOfGetMySuperiorListDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PagedResultDtoOfGetMySuperiorListDto>(<any>null);
    }

    /**
     * 获取我的团队列表
     * @agentId (optional) 推广代理人AgentId
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiReferralSubordinateMeGet(agentId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetMySubordinateListDto> {
        let url_ = this.baseUrl + "/api/Referral/Subordinate/Me?";
        if (agentId !== undefined)
            url_ += "AgentId=" + encodeURIComponent("" + agentId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiReferralSubordinateMeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiReferralSubordinateMeGet(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetMySubordinateListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetMySubordinateListDto>><any>Observable.throw(response_);
        });
    }

    protected processApiReferralSubordinateMeGet(response: HttpResponseBase): Observable<PagedResultDtoOfGetMySubordinateListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetMySubordinateListDto.fromJS(resultData200) : new PagedResultDtoOfGetMySubordinateListDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PagedResultDtoOfGetMySubordinateListDto>(<any>null);
    }

    /**
     * 获取我的推广明细
     * @referralId (optional) 推广项目Id 为Null时查询登录用户所有推广项目
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiReferralReferralDetailMeGet(referralId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetReferralDetailListDto> {
        let url_ = this.baseUrl + "/api/Referral/ReferralDetail/Me?";
        if (referralId !== undefined)
            url_ += "ReferralId=" + encodeURIComponent("" + referralId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiReferralReferralDetailMeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiReferralReferralDetailMeGet(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetReferralDetailListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetReferralDetailListDto>><any>Observable.throw(response_);
        });
    }

    protected processApiReferralReferralDetailMeGet(response: HttpResponseBase): Observable<PagedResultDtoOfGetReferralDetailListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetReferralDetailListDto.fromJS(resultData200) : new PagedResultDtoOfGetReferralDetailListDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PagedResultDtoOfGetReferralDetailListDto>(<any>null);
    }

    /**
     * 请求发送短信验证码
     * @input (optional) 
     * @return Success
     */
    apiSmsCodePost(input: CreateSmsCodeInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/SmsCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processApiSmsCodePost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiSmsCodePost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processApiSmsCodePost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * 添加银行卡
     * @input (optional) 
     * @return Success
     */
    apiWithdrawBankCardPost(input: AddBankCardInput | null | undefined): Observable<AddBankCardOutput> {
        let url_ = this.baseUrl + "/api/Withdraw/BankCard";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processApiWithdrawBankCardPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiWithdrawBankCardPost(<any>response_);
                } catch (e) {
                    return <Observable<AddBankCardOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<AddBankCardOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiWithdrawBankCardPost(response: HttpResponseBase): Observable<AddBankCardOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AddBankCardOutput.fromJS(resultData200) : new AddBankCardOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AddBankCardOutput>(<any>null);
    }

    /**
     * 获取系统支持的所有银行
     * @return Success
     */
    apiWithdrawBankInfoGet(): Observable<GetBankInfoListDto[]> {
        let url_ = this.baseUrl + "/api/Withdraw/BankInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiWithdrawBankInfoGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiWithdrawBankInfoGet(<any>response_);
                } catch (e) {
                    return <Observable<GetBankInfoListDto[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetBankInfoListDto[]>><any>Observable.throw(response_);
        });
    }

    protected processApiWithdrawBankInfoGet(response: HttpResponseBase): Observable<GetBankInfoListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(GetBankInfoListDto.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetBankInfoListDto[]>(<any>null);
    }

    /**
     * 获取提现银行
     * @return Success
     */
    apiWithdrawBankCardMeGet(): Observable<GetBankCardOutput> {
        let url_ = this.baseUrl + "/api/Withdraw/BankCard/Me";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiWithdrawBankCardMeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiWithdrawBankCardMeGet(<any>response_);
                } catch (e) {
                    return <Observable<GetBankCardOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<GetBankCardOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiWithdrawBankCardMeGet(response: HttpResponseBase): Observable<GetBankCardOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetBankCardOutput.fromJS(resultData200) : new GetBankCardOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<GetBankCardOutput>(<any>null);
    }

    /**
     * 申请提现
     * @input (optional) 
     * @return Success
     */
    apiWithdrawPost(input: WithdrawDepositInput | null | undefined): Observable<WithdrawDepositOutput> {
        let url_ = this.baseUrl + "/api/Withdraw";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processApiWithdrawPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiWithdrawPost(<any>response_);
                } catch (e) {
                    return <Observable<WithdrawDepositOutput>><any>Observable.throw(e);
                }
            } else
                return <Observable<WithdrawDepositOutput>><any>Observable.throw(response_);
        });
    }

    protected processApiWithdrawPost(response: HttpResponseBase): Observable<WithdrawDepositOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? WithdrawDepositOutput.fromJS(resultData200) : new WithdrawDepositOutput();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<WithdrawDepositOutput>(<any>null);
    }

    /**
     * 获取提现记录列表
     * @agentInfoId (optional) 代理Id 可以不传
     * @sorting (optional) 
     * @maxResultCount (optional) 
     * @skipCount (optional) 
     * @return Success
     */
    apiWithdrawMeGet(agentInfoId: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfGetWithdrawDepositListDto> {
        let url_ = this.baseUrl + "/api/Withdraw/Me?";
        if (agentInfoId !== undefined)
            url_ += "AgentInfoId=" + encodeURIComponent("" + agentInfoId) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processApiWithdrawMeGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiWithdrawMeGet(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfGetWithdrawDepositListDto>><any>Observable.throw(e);
                }
            } else
                return <Observable<PagedResultDtoOfGetWithdrawDepositListDto>><any>Observable.throw(response_);
        });
    }

    protected processApiWithdrawMeGet(response: HttpResponseBase): Observable<PagedResultDtoOfGetWithdrawDepositListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfGetWithdrawDepositListDto.fromJS(resultData200) : new PagedResultDtoOfGetWithdrawDepositListDto();
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<PagedResultDtoOfGetWithdrawDepositListDto>(<any>null);
    }
}

/** 获取资源类型列表 输出参数 */
export class GetADTypeListDto implements IGetADTypeListDto {
    /** 类型Id */
    id!: number | undefined;
    /** 类型名称 */
    name!: string | undefined;

    constructor(data?: IGetADTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetADTypeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetADTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

/** 获取资源类型列表 输出参数 */
export interface IGetADTypeListDto {
    /** 类型Id */
    id: number | undefined;
    /** 类型名称 */
    name: string | undefined;
}

export class PagedResultDtoOfGetADListDto implements IPagedResultDtoOfGetADListDto {
    totalCount!: number | undefined;
    items!: GetADListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetADListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetADListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetADListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetADListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetADListDto {
    totalCount: number | undefined;
    items: GetADListDto[] | undefined;
}

/** 获取资源列表 输出参数 */
export class GetADListDto implements IGetADListDto {
    /** 资源Id */
    id!: number | undefined;
    /** 标题 */
    title!: string | undefined;

    constructor(data?: IGetADListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
        }
    }

    static fromJS(data: any): GetADListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetADListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data; 
    }
}

/** 获取资源列表 输出参数 */
export interface IGetADListDto {
    /** 资源Id */
    id: number | undefined;
    /** 标题 */
    title: string | undefined;
}

/** 获取资源详情 输出参数 */
export class GetADDetailOutput implements IGetADDetailOutput {
    /** 资源Id */
    id!: number | undefined;
    /** 标题 */
    title!: string | undefined;
    /** 内容 */
    content!: string | undefined;
    /** 资源类型Id */
    adTypeId!: number | undefined;
    /** 资源类型名称 */
    adTypeName!: string | undefined;
    /** 所属推广项目Id */
    referralId!: number | undefined;
    /** 所属推广项目名称 */
    referralName!: string | undefined;

    constructor(data?: IGetADDetailOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.title = data["title"];
            this.content = data["content"];
            this.adTypeId = data["adTypeId"];
            this.adTypeName = data["adTypeName"];
            this.referralId = data["referralId"];
            this.referralName = data["referralName"];
        }
    }

    static fromJS(data: any): GetADDetailOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetADDetailOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["content"] = this.content;
        data["adTypeId"] = this.adTypeId;
        data["adTypeName"] = this.adTypeName;
        data["referralId"] = this.referralId;
        data["referralName"] = this.referralName;
        return data; 
    }
}

/** 获取资源详情 输出参数 */
export interface IGetADDetailOutput {
    /** 资源Id */
    id: number | undefined;
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** 资源类型Id */
    adTypeId: number | undefined;
    /** 资源类型名称 */
    adTypeName: string | undefined;
    /** 所属推广项目Id */
    referralId: number | undefined;
    /** 所属推广项目名称 */
    referralName: string | undefined;
}

/** 登陆 输入参数 */
export class AppLoginInput implements IAppLoginInput {
    /** 手机号码 */
    phone!: string;
    /** 验证码 */
    validateCode!: string;

    constructor(data?: IAppLoginInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.phone = data["phone"];
            this.validateCode = data["validateCode"];
        }
    }

    static fromJS(data: any): AppLoginInput {
        data = typeof data === 'object' ? data : {};
        let result = new AppLoginInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phone"] = this.phone;
        data["validateCode"] = this.validateCode;
        return data; 
    }
}

/** 登陆 输入参数 */
export interface IAppLoginInput {
    /** 手机号码 */
    phone: string;
    /** 验证码 */
    validateCode: string;
}

/** 登陆 输出参数 */
export class AppLoginOutput implements IAppLoginOutput {
    /** 用户Id 前端保存 备用 */
    userId!: number | undefined;
    /** 代理Id 前端保存 备用 */
    agentInfoId!: number | undefined;
    /** 手机号码 */
    phone!: string | undefined;
    /** 访问AccessToken */
    accessToken!: string | undefined;
    /** 过期时间 */
    expireInSeconds!: number | undefined;

    constructor(data?: IAppLoginOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.agentInfoId = data["agentInfoId"];
            this.phone = data["phone"];
            this.accessToken = data["accessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    }

    static fromJS(data: any): AppLoginOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AppLoginOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["agentInfoId"] = this.agentInfoId;
        data["phone"] = this.phone;
        data["accessToken"] = this.accessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data; 
    }
}

/** 登陆 输出参数 */
export interface IAppLoginOutput {
    /** 用户Id 前端保存 备用 */
    userId: number | undefined;
    /** 代理Id 前端保存 备用 */
    agentInfoId: number | undefined;
    /** 手机号码 */
    phone: string | undefined;
    /** 访问AccessToken */
    accessToken: string | undefined;
    /** 过期时间 */
    expireInSeconds: number | undefined;
}

/** 编辑 输入参数 */
export class EditAgentInput implements IEditAgentInput {
    /** 姓名 */
    name!: string | undefined;
    /** 头像 */
    portraitImg!: string | undefined;

    constructor(data?: IEditAgentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.portraitImg = data["portraitImg"];
        }
    }

    static fromJS(data: any): EditAgentInput {
        data = typeof data === 'object' ? data : {};
        let result = new EditAgentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["portraitImg"] = this.portraitImg;
        return data; 
    }
}

/** 编辑 输入参数 */
export interface IEditAgentInput {
    /** 姓名 */
    name: string | undefined;
    /** 头像 */
    portraitImg: string | undefined;
}

/** 编辑 输出参数 */
export class EditAgentOutput implements IEditAgentOutput {
    /** 用户Id */
    userId!: number | undefined;

    constructor(data?: IEditAgentOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): EditAgentOutput {
        data = typeof data === 'object' ? data : {};
        let result = new EditAgentOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        return data; 
    }
}

/** 编辑 输出参数 */
export interface IEditAgentOutput {
    /** 用户Id */
    userId: number | undefined;
}

/** 个人中心 输出参数 */
export class GetAgentInfoOutput implements IGetAgentInfoOutput {
    /** 用户姓名 */
    name!: string | undefined;
    /** 头像 */
    portraitImg!: string | undefined;
    /** 可使用金额 */
    usableAmount!: number | undefined;
    /** 未结算金额 */
    outstandingAmount!: number | undefined;
    /** 历史收益 */
    historyAmount!: number | undefined;

    constructor(data?: IGetAgentInfoOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.portraitImg = data["portraitImg"];
            this.usableAmount = data["usableAmount"];
            this.outstandingAmount = data["outstandingAmount"];
            this.historyAmount = data["historyAmount"];
        }
    }

    static fromJS(data: any): GetAgentInfoOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetAgentInfoOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["portraitImg"] = this.portraitImg;
        data["usableAmount"] = this.usableAmount;
        data["outstandingAmount"] = this.outstandingAmount;
        data["historyAmount"] = this.historyAmount;
        return data; 
    }
}

/** 个人中心 输出参数 */
export interface IGetAgentInfoOutput {
    /** 用户姓名 */
    name: string | undefined;
    /** 头像 */
    portraitImg: string | undefined;
    /** 可使用金额 */
    usableAmount: number | undefined;
    /** 未结算金额 */
    outstandingAmount: number | undefined;
    /** 历史收益 */
    historyAmount: number | undefined;
}

/** 获取轮询图 输出参数 */
export class GetCarouselPictureListDto implements IGetCarouselPictureListDto {
    /** 图片链接 */
    imageUrl!: string | undefined;
    /** 点击图片链接的URL */
    url!: string | undefined;

    constructor(data?: IGetCarouselPictureListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.imageUrl = data["imageUrl"];
            this.url = data["url"];
        }
    }

    static fromJS(data: any): GetCarouselPictureListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetCarouselPictureListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["imageUrl"] = this.imageUrl;
        data["url"] = this.url;
        return data; 
    }
}

/** 获取轮询图 输出参数 */
export interface IGetCarouselPictureListDto {
    /** 图片链接 */
    imageUrl: string | undefined;
    /** 点击图片链接的URL */
    url: string | undefined;
}

export class PagedResultDtoOfGetNewsListDto implements IPagedResultDtoOfGetNewsListDto {
    totalCount!: number | undefined;
    items!: GetNewsListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetNewsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetNewsListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetNewsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetNewsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetNewsListDto {
    totalCount: number | undefined;
    items: GetNewsListDto[] | undefined;
}

/** 获取资讯/公告列表 输出参数 */
export class GetNewsListDto implements IGetNewsListDto {
    /** 资讯Id */
    id!: number | undefined;
    /** 封面 */
    cover!: string | undefined;
    /** 标题 */
    title!: string | undefined;
    /** 简介 */
    introduction!: string | undefined;
    /** 发布时间 */
    releaseTime!: moment.Moment | undefined;
    /** 栏目名称 */
    columnName!: string | undefined;

    constructor(data?: IGetNewsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.cover = data["cover"];
            this.title = data["title"];
            this.introduction = data["introduction"];
            this.releaseTime = data["releaseTime"] ? moment(data["releaseTime"].toString()) : <any>undefined;
            this.columnName = data["columnName"];
        }
    }

    static fromJS(data: any): GetNewsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetNewsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cover"] = this.cover;
        data["title"] = this.title;
        data["introduction"] = this.introduction;
        data["releaseTime"] = this.releaseTime ? this.releaseTime.toISOString() : <any>undefined;
        data["columnName"] = this.columnName;
        return data; 
    }
}

/** 获取资讯/公告列表 输出参数 */
export interface IGetNewsListDto {
    /** 资讯Id */
    id: number | undefined;
    /** 封面 */
    cover: string | undefined;
    /** 标题 */
    title: string | undefined;
    /** 简介 */
    introduction: string | undefined;
    /** 发布时间 */
    releaseTime: moment.Moment | undefined;
    /** 栏目名称 */
    columnName: string | undefined;
}

/** 获取资讯/公告详情 输出参数 */
export class GetNewsDetailInfoOutput implements IGetNewsDetailInfoOutput {
    /** 资讯Id */
    id!: number | undefined;
    /** 封面 */
    cover!: string | undefined;
    /** 标题 */
    title!: string | undefined;
    /** 简介 */
    introduction!: string | undefined;
    /** 发布时间 */
    releaseTime!: moment.Moment | undefined;
    /** 栏目名称 */
    columnName!: string | undefined;
    /** 内容 */
    content!: string | undefined;

    constructor(data?: IGetNewsDetailInfoOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.cover = data["cover"];
            this.title = data["title"];
            this.introduction = data["introduction"];
            this.releaseTime = data["releaseTime"] ? moment(data["releaseTime"].toString()) : <any>undefined;
            this.columnName = data["columnName"];
            this.content = data["content"];
        }
    }

    static fromJS(data: any): GetNewsDetailInfoOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetNewsDetailInfoOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cover"] = this.cover;
        data["title"] = this.title;
        data["introduction"] = this.introduction;
        data["releaseTime"] = this.releaseTime ? this.releaseTime.toISOString() : <any>undefined;
        data["columnName"] = this.columnName;
        data["content"] = this.content;
        return data; 
    }
}

/** 获取资讯/公告详情 输出参数 */
export interface IGetNewsDetailInfoOutput {
    /** 资讯Id */
    id: number | undefined;
    /** 封面 */
    cover: string | undefined;
    /** 标题 */
    title: string | undefined;
    /** 简介 */
    introduction: string | undefined;
    /** 发布时间 */
    releaseTime: moment.Moment | undefined;
    /** 栏目名称 */
    columnName: string | undefined;
    /** 内容 */
    content: string | undefined;
}

/** 获取用户协议 输出参数 */
export class GetUserAgreementInfoOutput implements IGetUserAgreementInfoOutput {
    /** 标题 */
    title!: string | undefined;
    /** 内容 */
    content!: string | undefined;
    /** 发布时间 */
    releaseTime!: moment.Moment | undefined;

    constructor(data?: IGetUserAgreementInfoOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"];
            this.content = data["content"];
            this.releaseTime = data["releaseTime"] ? moment(data["releaseTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUserAgreementInfoOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserAgreementInfoOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["content"] = this.content;
        data["releaseTime"] = this.releaseTime ? this.releaseTime.toISOString() : <any>undefined;
        return data; 
    }
}

/** 获取用户协议 输出参数 */
export interface IGetUserAgreementInfoOutput {
    /** 标题 */
    title: string | undefined;
    /** 内容 */
    content: string | undefined;
    /** 发布时间 */
    releaseTime: moment.Moment | undefined;
}

/** 获取资讯栏目 输出参数 */
export class GetNewsColumnListDto implements IGetNewsColumnListDto {
    /** 资讯Id */
    newsColumnId!: number | undefined;
    /** 栏目名称 */
    newsColumnName!: string | undefined;

    constructor(data?: IGetNewsColumnListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.newsColumnId = data["newsColumnId"];
            this.newsColumnName = data["newsColumnName"];
        }
    }

    static fromJS(data: any): GetNewsColumnListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetNewsColumnListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newsColumnId"] = this.newsColumnId;
        data["newsColumnName"] = this.newsColumnName;
        return data; 
    }
}

/** 获取资讯栏目 输出参数 */
export interface IGetNewsColumnListDto {
    /** 资讯Id */
    newsColumnId: number | undefined;
    /** 栏目名称 */
    newsColumnName: string | undefined;
}

export class PagedResultDtoOfGetMyCustomerListDto implements IPagedResultDtoOfGetMyCustomerListDto {
    totalCount!: number | undefined;
    items!: GetMyCustomerListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetMyCustomerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMyCustomerListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetMyCustomerListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetMyCustomerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetMyCustomerListDto {
    totalCount: number | undefined;
    items: GetMyCustomerListDto[] | undefined;
}

/** 获取我的客户列表 输出参数 */
export class GetMyCustomerListDto implements IGetMyCustomerListDto {
    /** 成员Id */
    customerId!: string | undefined;
    /** 成员姓名 */
    customerName!: string | undefined;
    /** 成员电话 */
    customerPhone!: string | undefined;
    /** 成员类型 */
    customerType!: GetMyCustomerListDtoCustomerType | undefined;

    constructor(data?: IGetMyCustomerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"];
            this.customerName = data["customerName"];
            this.customerPhone = data["customerPhone"];
            this.customerType = data["customerType"];
        }
    }

    static fromJS(data: any): GetMyCustomerListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMyCustomerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["customerPhone"] = this.customerPhone;
        data["customerType"] = this.customerType;
        return data; 
    }
}

/** 获取我的客户列表 输出参数 */
export interface IGetMyCustomerListDto {
    /** 成员Id */
    customerId: string | undefined;
    /** 成员姓名 */
    customerName: string | undefined;
    /** 成员电话 */
    customerPhone: string | undefined;
    /** 成员类型 */
    customerType: GetMyCustomerListDtoCustomerType | undefined;
}

/** 新增客户 输入参数 */
export class AddCustomerListInput implements IAddCustomerListInput {
    /** 推广项目Id */
    referralId!: number | undefined;
    /** 成员姓名 */
    customerName!: string | undefined;
    /** 成员电话 */
    customerPhone!: string | undefined;
    /** 成员类型 */
    customerType!: AddCustomerListInputCustomerType | undefined;

    constructor(data?: IAddCustomerListInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.referralId = data["referralId"];
            this.customerName = data["customerName"];
            this.customerPhone = data["customerPhone"];
            this.customerType = data["customerType"];
        }
    }

    static fromJS(data: any): AddCustomerListInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddCustomerListInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referralId"] = this.referralId;
        data["customerName"] = this.customerName;
        data["customerPhone"] = this.customerPhone;
        data["customerType"] = this.customerType;
        return data; 
    }
}

/** 新增客户 输入参数 */
export interface IAddCustomerListInput {
    /** 推广项目Id */
    referralId: number | undefined;
    /** 成员姓名 */
    customerName: string | undefined;
    /** 成员电话 */
    customerPhone: string | undefined;
    /** 成员类型 */
    customerType: AddCustomerListInputCustomerType | undefined;
}

/** 新增客户 输出参数 */
export class AddCustomerListDto implements IAddCustomerListDto {
    /** 成员姓名 */
    customerName!: string | undefined;

    constructor(data?: IAddCustomerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerName = data["customerName"];
        }
    }

    static fromJS(data: any): AddCustomerListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddCustomerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerName"] = this.customerName;
        return data; 
    }
}

/** 新增客户 输出参数 */
export interface IAddCustomerListDto {
    /** 成员姓名 */
    customerName: string | undefined;
}

/** 获取省级行政区 输出参数 */
export class GetProvinceListDto implements IGetProvinceListDto {
    /** 区域Id */
    id!: number | undefined;
    /** 名称 */
    name!: string | undefined;

    constructor(data?: IGetProvinceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetProvinceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetProvinceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

/** 获取省级行政区 输出参数 */
export interface IGetProvinceListDto {
    /** 区域Id */
    id: number | undefined;
    /** 名称 */
    name: string | undefined;
}

/** 根据父级Id获取区域信息 输出参数 */
export class GetDistrictsListByParentIdDto implements IGetDistrictsListByParentIdDto {
    /** 区域Id */
    id!: number | undefined;
    /** 名称 */
    name!: string | undefined;
    /** 行政区划级别 */
    districtLevel!: string | undefined;

    constructor(data?: IGetDistrictsListByParentIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.districtLevel = data["districtLevel"];
        }
    }

    static fromJS(data: any): GetDistrictsListByParentIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetDistrictsListByParentIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["districtLevel"] = this.districtLevel;
        return data; 
    }
}

/** 根据父级Id获取区域信息 输出参数 */
export interface IGetDistrictsListByParentIdDto {
    /** 区域Id */
    id: number | undefined;
    /** 名称 */
    name: string | undefined;
    /** 行政区划级别 */
    districtLevel: string | undefined;
}

/** 开单 输入参数 */
export class AddMyOrderInput implements IAddMyOrderInput {
    /** 推广项目Id */
    referralProjectInfoId!: number | undefined;
    /** 被推荐人姓名 */
    name!: string;
    /** 被推荐人电话 */
    phone!: string;
    /** 被推荐人所在行政区 */
    districtId!: number | undefined;

    constructor(data?: IAddMyOrderInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.referralProjectInfoId = data["referralProjectInfoId"];
            this.name = data["name"];
            this.phone = data["phone"];
            this.districtId = data["districtId"];
        }
    }

    static fromJS(data: any): AddMyOrderInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddMyOrderInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referralProjectInfoId"] = this.referralProjectInfoId;
        data["name"] = this.name;
        data["phone"] = this.phone;
        data["districtId"] = this.districtId;
        return data; 
    }
}

/** 开单 输入参数 */
export interface IAddMyOrderInput {
    /** 推广项目Id */
    referralProjectInfoId: number | undefined;
    /** 被推荐人姓名 */
    name: string;
    /** 被推荐人电话 */
    phone: string;
    /** 被推荐人所在行政区 */
    districtId: number | undefined;
}

/** 开单 输出参数 */
export class AddMyOrderOutput implements IAddMyOrderOutput {
    /** 订单Id */
    orderId!: number | undefined;
    /** 订单Code */
    code!: string | undefined;
    /** 应付金额 */
    payableAmount!: number | undefined;

    constructor(data?: IAddMyOrderOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.code = data["code"];
            this.payableAmount = data["payableAmount"];
        }
    }

    static fromJS(data: any): AddMyOrderOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AddMyOrderOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["code"] = this.code;
        data["payableAmount"] = this.payableAmount;
        return data; 
    }
}

/** 开单 输出参数 */
export interface IAddMyOrderOutput {
    /** 订单Id */
    orderId: number | undefined;
    /** 订单Code */
    code: string | undefined;
    /** 应付金额 */
    payableAmount: number | undefined;
}

/** 支付 完成之后 输入参数 */
export class PayMyOrderInput implements IPayMyOrderInput {
    /** 订单Id */
    orderId!: number | undefined;
    /** 订单Code */
    code!: string | undefined;
    /** 应付金额 */
    payableAmount!: number | undefined;

    constructor(data?: IPayMyOrderInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.code = data["code"];
            this.payableAmount = data["payableAmount"];
        }
    }

    static fromJS(data: any): PayMyOrderInput {
        data = typeof data === 'object' ? data : {};
        let result = new PayMyOrderInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["code"] = this.code;
        data["payableAmount"] = this.payableAmount;
        return data; 
    }
}

/** 支付 完成之后 输入参数 */
export interface IPayMyOrderInput {
    /** 订单Id */
    orderId: number | undefined;
    /** 订单Code */
    code: string | undefined;
    /** 应付金额 */
    payableAmount: number | undefined;
}

/** 支付 完成之后 输出参数 */
export class PayMyOrderOutput implements IPayMyOrderOutput {
    /** 订单Id */
    orderId!: number | undefined;
    /** 订单Code */
    code!: string | undefined;
    /** 订单状态 */
    status!: PayMyOrderOutputStatus | undefined;

    constructor(data?: IPayMyOrderOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
            this.code = data["code"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): PayMyOrderOutput {
        data = typeof data === 'object' ? data : {};
        let result = new PayMyOrderOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        data["code"] = this.code;
        data["status"] = this.status;
        return data; 
    }
}

/** 支付 完成之后 输出参数 */
export interface IPayMyOrderOutput {
    /** 订单Id */
    orderId: number | undefined;
    /** 订单Code */
    code: string | undefined;
    /** 订单状态 */
    status: PayMyOrderOutputStatus | undefined;
}

export class PagedResultDtoOfGetMyOrderListDto implements IPagedResultDtoOfGetMyOrderListDto {
    totalCount!: number | undefined;
    items!: GetMyOrderListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetMyOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMyOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetMyOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetMyOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetMyOrderListDto {
    totalCount: number | undefined;
    items: GetMyOrderListDto[] | undefined;
}

/** 获取我的开单记录 输出参数 */
export class GetMyOrderListDto implements IGetMyOrderListDto {
    /** 订单Id，用于编辑 */
    id!: number | undefined;
    /** 订单编号 */
    code!: string | undefined;
    /** 被推荐人姓名 */
    name!: string | undefined;
    /** 订单金额 */
    amount!: number | undefined;
    /** 推广项目名称 */
    referralName!: string | undefined;
    /** 推荐日期 */
    referralDate!: moment.Moment | undefined;
    /** 订单状态 */
    orderStatus!: GetMyOrderListDtoOrderStatus | undefined;

    constructor(data?: IGetMyOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.amount = data["amount"];
            this.referralName = data["referralName"];
            this.referralDate = data["referralDate"] ? moment(data["referralDate"].toString()) : <any>undefined;
            this.orderStatus = data["orderStatus"];
        }
    }

    static fromJS(data: any): GetMyOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMyOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["amount"] = this.amount;
        data["referralName"] = this.referralName;
        data["referralDate"] = this.referralDate ? this.referralDate.toISOString() : <any>undefined;
        data["orderStatus"] = this.orderStatus;
        return data; 
    }
}

/** 获取我的开单记录 输出参数 */
export interface IGetMyOrderListDto {
    /** 订单Id，用于编辑 */
    id: number | undefined;
    /** 订单编号 */
    code: string | undefined;
    /** 被推荐人姓名 */
    name: string | undefined;
    /** 订单金额 */
    amount: number | undefined;
    /** 推广项目名称 */
    referralName: string | undefined;
    /** 推荐日期 */
    referralDate: moment.Moment | undefined;
    /** 订单状态 */
    orderStatus: GetMyOrderListDtoOrderStatus | undefined;
}

export class AppPayOutput implements IAppPayOutput {
    appId!: string | undefined;
    mchId!: string | undefined;
    timeStamp!: string | undefined;
    nonceStr!: string | undefined;
    prepayId!: string | undefined;
    package!: string | undefined;
    signType!: string | undefined;
    paySign!: string | undefined;

    constructor(data?: IAppPayOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.appId = data["appId"];
            this.mchId = data["mchId"];
            this.timeStamp = data["timeStamp"];
            this.nonceStr = data["nonceStr"];
            this.prepayId = data["prepayId"];
            this.package = data["package"];
            this.signType = data["signType"];
            this.paySign = data["paySign"];
        }
    }

    static fromJS(data: any): AppPayOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AppPayOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["mchId"] = this.mchId;
        data["timeStamp"] = this.timeStamp;
        data["nonceStr"] = this.nonceStr;
        data["prepayId"] = this.prepayId;
        data["package"] = this.package;
        data["signType"] = this.signType;
        data["paySign"] = this.paySign;
        return data; 
    }
}

export interface IAppPayOutput {
    appId: string | undefined;
    mchId: string | undefined;
    timeStamp: string | undefined;
    nonceStr: string | undefined;
    prepayId: string | undefined;
    package: string | undefined;
    signType: string | undefined;
    paySign: string | undefined;
}

export class PagedResultDtoOfGetReferralRankingListDto implements IPagedResultDtoOfGetReferralRankingListDto {
    totalCount!: number | undefined;
    items!: GetReferralRankingListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetReferralRankingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetReferralRankingListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetReferralRankingListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetReferralRankingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetReferralRankingListDto {
    totalCount: number | undefined;
    items: GetReferralRankingListDto[] | undefined;
}

/** 获取推广项目个人收入排行榜 输出参数 */
export class GetReferralRankingListDto implements IGetReferralRankingListDto {
    /** 推广人名称 */
    name!: string | undefined;
    /** 推广人收入 */
    pushMoney!: number | undefined;

    constructor(data?: IGetReferralRankingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.pushMoney = data["pushMoney"];
        }
    }

    static fromJS(data: any): GetReferralRankingListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetReferralRankingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["pushMoney"] = this.pushMoney;
        return data; 
    }
}

/** 获取推广项目个人收入排行榜 输出参数 */
export interface IGetReferralRankingListDto {
    /** 推广人名称 */
    name: string | undefined;
    /** 推广人收入 */
    pushMoney: number | undefined;
}

/** 获取所有推广项目列表 输出参数 */
export class GetAllReferralProjectListDto implements IGetAllReferralProjectListDto {
    /** 推广项目Id */
    referralProjectId!: number | undefined;
    /** 推广项目名称 */
    name!: string | undefined;

    constructor(data?: IGetAllReferralProjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.referralProjectId = data["referralProjectId"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): GetAllReferralProjectListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllReferralProjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referralProjectId"] = this.referralProjectId;
        data["name"] = this.name;
        return data; 
    }
}

/** 获取所有推广项目列表 输出参数 */
export interface IGetAllReferralProjectListDto {
    /** 推广项目Id */
    referralProjectId: number | undefined;
    /** 推广项目名称 */
    name: string | undefined;
}

/** 获取我的推广项目列表 输出参数 */
export class GetReferralProjectListDto implements IGetReferralProjectListDto {
    /** 代理人和推广项目关联Id */
    agentReferralProjectId!: number | undefined;
    /** 推广项目Id */
    referralProjectId!: number | undefined;
    /** 推广项目名称 */
    name!: string | undefined;
    /** 推广项目对应推荐码 */
    referralCode!: string | undefined;
    /** 推广项目对应二维码 */
    referralQRCode!: string | undefined;
    /** 开单并直接支付时所需支付金额(开单支付时显示用) 前端保存 备用 */
    payableAmount!: number | undefined;

    constructor(data?: IGetReferralProjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.agentReferralProjectId = data["agentReferralProjectId"];
            this.referralProjectId = data["referralProjectId"];
            this.name = data["name"];
            this.referralCode = data["referralCode"];
            this.referralQRCode = data["referralQRCode"];
            this.payableAmount = data["payableAmount"];
        }
    }

    static fromJS(data: any): GetReferralProjectListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetReferralProjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["agentReferralProjectId"] = this.agentReferralProjectId;
        data["referralProjectId"] = this.referralProjectId;
        data["name"] = this.name;
        data["referralCode"] = this.referralCode;
        data["referralQRCode"] = this.referralQRCode;
        data["payableAmount"] = this.payableAmount;
        return data; 
    }
}

/** 获取我的推广项目列表 输出参数 */
export interface IGetReferralProjectListDto {
    /** 代理人和推广项目关联Id */
    agentReferralProjectId: number | undefined;
    /** 推广项目Id */
    referralProjectId: number | undefined;
    /** 推广项目名称 */
    name: string | undefined;
    /** 推广项目对应推荐码 */
    referralCode: string | undefined;
    /** 推广项目对应二维码 */
    referralQRCode: string | undefined;
    /** 开单并直接支付时所需支付金额(开单支付时显示用) 前端保存 备用 */
    payableAmount: number | undefined;
}

export class PagedResultDtoOfGetMySuperiorListDto implements IPagedResultDtoOfGetMySuperiorListDto {
    totalCount!: number | undefined;
    items!: GetMySuperiorListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetMySuperiorListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMySuperiorListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetMySuperiorListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetMySuperiorListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetMySuperiorListDto {
    totalCount: number | undefined;
    items: GetMySuperiorListDto[] | undefined;
}

/** 获取我的上级推荐人列表 输出参数 */
export class GetMySuperiorListDto implements IGetMySuperiorListDto {
    /** 推广项目Id */
    referralId!: number | undefined;
    /** 推广项目名称 */
    referralName!: string | undefined;
    /** 我的上级推荐姓名 */
    superiorName!: string | undefined;
    /** 推荐时间 */
    referralDateTime!: moment.Moment | undefined;
    /** 头像 */
    portraitImg!: string | undefined;

    constructor(data?: IGetMySuperiorListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.referralId = data["referralId"];
            this.referralName = data["referralName"];
            this.superiorName = data["superiorName"];
            this.referralDateTime = data["referralDateTime"] ? moment(data["referralDateTime"].toString()) : <any>undefined;
            this.portraitImg = data["portraitImg"];
        }
    }

    static fromJS(data: any): GetMySuperiorListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMySuperiorListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referralId"] = this.referralId;
        data["referralName"] = this.referralName;
        data["superiorName"] = this.superiorName;
        data["referralDateTime"] = this.referralDateTime ? this.referralDateTime.toISOString() : <any>undefined;
        data["portraitImg"] = this.portraitImg;
        return data; 
    }
}

/** 获取我的上级推荐人列表 输出参数 */
export interface IGetMySuperiorListDto {
    /** 推广项目Id */
    referralId: number | undefined;
    /** 推广项目名称 */
    referralName: string | undefined;
    /** 我的上级推荐姓名 */
    superiorName: string | undefined;
    /** 推荐时间 */
    referralDateTime: moment.Moment | undefined;
    /** 头像 */
    portraitImg: string | undefined;
}

export class PagedResultDtoOfGetMySubordinateListDto implements IPagedResultDtoOfGetMySubordinateListDto {
    totalCount!: number | undefined;
    items!: GetMySubordinateListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetMySubordinateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetMySubordinateListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetMySubordinateListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetMySubordinateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetMySubordinateListDto {
    totalCount: number | undefined;
    items: GetMySubordinateListDto[] | undefined;
}

/** 获取我的团队列表 输出参数 */
export class GetMySubordinateListDto implements IGetMySubordinateListDto {
    /** 推广项目Id */
    referralId!: number | undefined;
    /** 推广项目名称 */
    referralName!: string | undefined;
    /** 成员Id */
    subordinateId!: number | undefined;
    /** 成员姓名 */
    subordinateName!: string | undefined;
    /** 成员电话 */
    subordinatePhone!: string | undefined;
    /** 推荐时间 */
    referralDateTime!: moment.Moment | undefined;
    /** 创造提成 */
    pushMoney!: number | undefined;
    /** 所有记录 总创造提成(统计记录) */
    totalMoney!: number | undefined;
    /** 头像 */
    portraitImg!: string | undefined;

    constructor(data?: IGetMySubordinateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.referralId = data["referralId"];
            this.referralName = data["referralName"];
            this.subordinateId = data["subordinateId"];
            this.subordinateName = data["subordinateName"];
            this.subordinatePhone = data["subordinatePhone"];
            this.referralDateTime = data["referralDateTime"] ? moment(data["referralDateTime"].toString()) : <any>undefined;
            this.pushMoney = data["pushMoney"];
            this.totalMoney = data["totalMoney"];
            this.portraitImg = data["portraitImg"];
        }
    }

    static fromJS(data: any): GetMySubordinateListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMySubordinateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referralId"] = this.referralId;
        data["referralName"] = this.referralName;
        data["subordinateId"] = this.subordinateId;
        data["subordinateName"] = this.subordinateName;
        data["subordinatePhone"] = this.subordinatePhone;
        data["referralDateTime"] = this.referralDateTime ? this.referralDateTime.toISOString() : <any>undefined;
        data["pushMoney"] = this.pushMoney;
        data["totalMoney"] = this.totalMoney;
        data["portraitImg"] = this.portraitImg;
        return data; 
    }
}

/** 获取我的团队列表 输出参数 */
export interface IGetMySubordinateListDto {
    /** 推广项目Id */
    referralId: number | undefined;
    /** 推广项目名称 */
    referralName: string | undefined;
    /** 成员Id */
    subordinateId: number | undefined;
    /** 成员姓名 */
    subordinateName: string | undefined;
    /** 成员电话 */
    subordinatePhone: string | undefined;
    /** 推荐时间 */
    referralDateTime: moment.Moment | undefined;
    /** 创造提成 */
    pushMoney: number | undefined;
    /** 所有记录 总创造提成(统计记录) */
    totalMoney: number | undefined;
    /** 头像 */
    portraitImg: string | undefined;
}

export class PagedResultDtoOfGetReferralDetailListDto implements IPagedResultDtoOfGetReferralDetailListDto {
    totalCount!: number | undefined;
    items!: GetReferralDetailListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetReferralDetailListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetReferralDetailListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetReferralDetailListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetReferralDetailListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetReferralDetailListDto {
    totalCount: number | undefined;
    items: GetReferralDetailListDto[] | undefined;
}

/** 获取我的推广明细 输出参数 */
export class GetReferralDetailListDto implements IGetReferralDetailListDto {
    /** 推广项目Id */
    referralId!: number | undefined;
    /** 推广项目名称 */
    referralName!: string | undefined;
    /** 成员Id */
    subordinateId!: number | undefined;
    /** 成员姓名 */
    subordinateName!: string | undefined;
    /** 推荐时间 */
    referralDateTime!: moment.Moment | undefined;
    /** 创造提成 */
    pushMoney!: number | undefined;
    /** 上级成员姓名 */
    superiorName!: string | undefined;
    /** 头像 */
    portraitImg!: string | undefined;

    constructor(data?: IGetReferralDetailListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.referralId = data["referralId"];
            this.referralName = data["referralName"];
            this.subordinateId = data["subordinateId"];
            this.subordinateName = data["subordinateName"];
            this.referralDateTime = data["referralDateTime"] ? moment(data["referralDateTime"].toString()) : <any>undefined;
            this.pushMoney = data["pushMoney"];
            this.superiorName = data["superiorName"];
            this.portraitImg = data["portraitImg"];
        }
    }

    static fromJS(data: any): GetReferralDetailListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetReferralDetailListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referralId"] = this.referralId;
        data["referralName"] = this.referralName;
        data["subordinateId"] = this.subordinateId;
        data["subordinateName"] = this.subordinateName;
        data["referralDateTime"] = this.referralDateTime ? this.referralDateTime.toISOString() : <any>undefined;
        data["pushMoney"] = this.pushMoney;
        data["superiorName"] = this.superiorName;
        data["portraitImg"] = this.portraitImg;
        return data; 
    }
}

/** 获取我的推广明细 输出参数 */
export interface IGetReferralDetailListDto {
    /** 推广项目Id */
    referralId: number | undefined;
    /** 推广项目名称 */
    referralName: string | undefined;
    /** 成员Id */
    subordinateId: number | undefined;
    /** 成员姓名 */
    subordinateName: string | undefined;
    /** 推荐时间 */
    referralDateTime: moment.Moment | undefined;
    /** 创造提成 */
    pushMoney: number | undefined;
    /** 上级成员姓名 */
    superiorName: string | undefined;
    /** 头像 */
    portraitImg: string | undefined;
}

/** 请求发送短信验证码 输入参数 */
export class CreateSmsCodeInput implements ICreateSmsCodeInput {
    /** 手机号码 */
    phone!: string;

    constructor(data?: ICreateSmsCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.phone = data["phone"];
        }
    }

    static fromJS(data: any): CreateSmsCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSmsCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phone"] = this.phone;
        return data; 
    }
}

/** 请求发送短信验证码 输入参数 */
export interface ICreateSmsCodeInput {
    /** 手机号码 */
    phone: string;
}

/** 添加银行卡 输入参数 */
export class AddBankCardInput implements IAddBankCardInput {
    /** 开户银行Id 选择的银行 下拉框的Id */
    bankId!: number | undefined;
    /** 开户人姓名 */
    name!: string;
    /** 银行卡卡号 */
    bankCardNo!: string;
    /** 支行名称 */
    branchName!: string;

    constructor(data?: IAddBankCardInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankId = data["bankId"];
            this.name = data["name"];
            this.bankCardNo = data["bankCardNo"];
            this.branchName = data["branchName"];
        }
    }

    static fromJS(data: any): AddBankCardInput {
        data = typeof data === 'object' ? data : {};
        let result = new AddBankCardInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankId"] = this.bankId;
        data["name"] = this.name;
        data["bankCardNo"] = this.bankCardNo;
        data["branchName"] = this.branchName;
        return data; 
    }
}

/** 添加银行卡 输入参数 */
export interface IAddBankCardInput {
    /** 开户银行Id 选择的银行 下拉框的Id */
    bankId: number | undefined;
    /** 开户人姓名 */
    name: string;
    /** 银行卡卡号 */
    bankCardNo: string;
    /** 支行名称 */
    branchName: string;
}

/** 添加银行卡 输出参数 */
export class AddBankCardOutput implements IAddBankCardOutput {
    /** 用户关联银行卡记录Id */
    bankCardId!: number | undefined;
    /** 开户人姓名 */
    name!: string | undefined;
    /** 银行名称 */
    bankName!: string | undefined;
    /** 银行卡号 */
    bankCardNo!: string | undefined;

    constructor(data?: IAddBankCardOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankCardId = data["bankCardId"];
            this.name = data["name"];
            this.bankName = data["bankName"];
            this.bankCardNo = data["bankCardNo"];
        }
    }

    static fromJS(data: any): AddBankCardOutput {
        data = typeof data === 'object' ? data : {};
        let result = new AddBankCardOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankCardId"] = this.bankCardId;
        data["name"] = this.name;
        data["bankName"] = this.bankName;
        data["bankCardNo"] = this.bankCardNo;
        return data; 
    }
}

/** 添加银行卡 输出参数 */
export interface IAddBankCardOutput {
    /** 用户关联银行卡记录Id */
    bankCardId: number | undefined;
    /** 开户人姓名 */
    name: string | undefined;
    /** 银行名称 */
    bankName: string | undefined;
    /** 银行卡号 */
    bankCardNo: string | undefined;
}

/** 获取系统支持的所有银行 输出参数 */
export class GetBankInfoListDto implements IGetBankInfoListDto {
    /** 银行Id */
    bankInfoId!: number | undefined;
    /** 银行名称 */
    bankName!: string | undefined;

    constructor(data?: IGetBankInfoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankInfoId = data["bankInfoId"];
            this.bankName = data["bankName"];
        }
    }

    static fromJS(data: any): GetBankInfoListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetBankInfoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankInfoId"] = this.bankInfoId;
        data["bankName"] = this.bankName;
        return data; 
    }
}

/** 获取系统支持的所有银行 输出参数 */
export interface IGetBankInfoListDto {
    /** 银行Id */
    bankInfoId: number | undefined;
    /** 银行名称 */
    bankName: string | undefined;
}

/** 获取提现银行 输出参数 */
export class GetBankCardOutput implements IGetBankCardOutput {
    /** 用户关联银行卡记录Id */
    bankCardId!: number | undefined;
    /** 开户人姓名 */
    name!: string | undefined;
    /** 银行名称 */
    bankName!: string | undefined;
    /** 银行卡号 */
    bankCardNo!: string | undefined;

    constructor(data?: IGetBankCardOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankCardId = data["bankCardId"];
            this.name = data["name"];
            this.bankName = data["bankName"];
            this.bankCardNo = data["bankCardNo"];
        }
    }

    static fromJS(data: any): GetBankCardOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetBankCardOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankCardId"] = this.bankCardId;
        data["name"] = this.name;
        data["bankName"] = this.bankName;
        data["bankCardNo"] = this.bankCardNo;
        return data; 
    }
}

/** 获取提现银行 输出参数 */
export interface IGetBankCardOutput {
    /** 用户关联银行卡记录Id */
    bankCardId: number | undefined;
    /** 开户人姓名 */
    name: string | undefined;
    /** 银行名称 */
    bankName: string | undefined;
    /** 银行卡号 */
    bankCardNo: string | undefined;
}

/** 申请提现 输入参数 */
export class WithdrawDepositInput implements IWithdrawDepositInput {
    /** 用户关联银行卡记录Id (目前一个用户只设定一张银行卡，暂可不填) */
    bankCardId!: number | undefined;
    /** 提现金额 */
    totalFee!: number | undefined;

    constructor(data?: IWithdrawDepositInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bankCardId = data["bankCardId"];
            this.totalFee = data["totalFee"];
        }
    }

    static fromJS(data: any): WithdrawDepositInput {
        data = typeof data === 'object' ? data : {};
        let result = new WithdrawDepositInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankCardId"] = this.bankCardId;
        data["totalFee"] = this.totalFee;
        return data; 
    }
}

/** 申请提现 输入参数 */
export interface IWithdrawDepositInput {
    /** 用户关联银行卡记录Id (目前一个用户只设定一张银行卡，暂可不填) */
    bankCardId: number | undefined;
    /** 提现金额 */
    totalFee: number | undefined;
}

/** 申请提现 输出参数 */
export class WithdrawDepositOutput implements IWithdrawDepositOutput {
    /** 提现记录编号 */
    code!: string | undefined;
    /** 提现状态 */
    status!: WithdrawDepositOutputStatus | undefined;

    constructor(data?: IWithdrawDepositOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.status = data["status"];
        }
    }

    static fromJS(data: any): WithdrawDepositOutput {
        data = typeof data === 'object' ? data : {};
        let result = new WithdrawDepositOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["status"] = this.status;
        return data; 
    }
}

/** 申请提现 输出参数 */
export interface IWithdrawDepositOutput {
    /** 提现记录编号 */
    code: string | undefined;
    /** 提现状态 */
    status: WithdrawDepositOutputStatus | undefined;
}

export class PagedResultDtoOfGetWithdrawDepositListDto implements IPagedResultDtoOfGetWithdrawDepositListDto {
    totalCount!: number | undefined;
    items!: GetWithdrawDepositListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetWithdrawDepositListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (let item of data["items"])
                    this.items.push(GetWithdrawDepositListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetWithdrawDepositListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetWithdrawDepositListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPagedResultDtoOfGetWithdrawDepositListDto {
    totalCount: number | undefined;
    items: GetWithdrawDepositListDto[] | undefined;
}

/** 获取提现记录列表 输出参数 */
export class GetWithdrawDepositListDto implements IGetWithdrawDepositListDto {
    /** 提现记录Id */
    id!: number | undefined;
    /** 开户人姓名 */
    name!: string | undefined;
    /** 银行名称 */
    bankName!: string | undefined;
    /** 银行卡号 */
    bankCardNo!: string | undefined;
    /** 提现费用 */
    totalFee!: number | undefined;
    /** 提现状态 */
    status!: GetWithdrawDepositListDtoStatus | undefined;
    /** 申请时间 */
    creationTime!: moment.Moment | undefined;

    constructor(data?: IGetWithdrawDepositListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.bankName = data["bankName"];
            this.bankCardNo = data["bankCardNo"];
            this.totalFee = data["totalFee"];
            this.status = data["status"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetWithdrawDepositListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetWithdrawDepositListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["bankName"] = this.bankName;
        data["bankCardNo"] = this.bankCardNo;
        data["totalFee"] = this.totalFee;
        data["status"] = this.status;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }
}

/** 获取提现记录列表 输出参数 */
export interface IGetWithdrawDepositListDto {
    /** 提现记录Id */
    id: number | undefined;
    /** 开户人姓名 */
    name: string | undefined;
    /** 银行名称 */
    bankName: string | undefined;
    /** 银行卡号 */
    bankCardNo: string | undefined;
    /** 提现费用 */
    totalFee: number | undefined;
    /** 提现状态 */
    status: GetWithdrawDepositListDtoStatus | undefined;
    /** 申请时间 */
    creationTime: moment.Moment | undefined;
}

/** 轮询图类型 */
export enum CarouselPictures {
    _0 = 0, 
}

/** 资讯类型 */
export enum NewsType {
    _0 = 0, 
    _1 = 1, 
}

export enum GetMyCustomerListDtoCustomerType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum AddCustomerListInputCustomerType {
    _0 = 0, 
    _1 = 1, 
}

export enum PayMyOrderOutputStatus {
    _0 = 0, 
    _1 = 1, 
}

export enum GetMyOrderListDtoOrderStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum WithdrawDepositOutputStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum GetWithdrawDepositListDtoStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}